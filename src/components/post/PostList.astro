---
import { render, type CollectionEntry } from 'astro:content';
import { Hex, Skew } from '@components/ui';

import { Icon } from 'astro-icon/components';
import { toIcon } from '@/utils/icon';
import dayjs from 'dayjs';
import utc from 'dayjs/plugin/utc';
import FormattedDate from '../common/FormattedDate.astro';
dayjs.extend(utc);

export interface Props {
  entries: CollectionEntry<'blog'>[];
  current?: CollectionEntry<'blog'>;
}

const { entries, current } = Astro.props;

const anim = {
  old: {
    name: 'fade',
    duration: '0.5s',
    easing: 'ease-in-out',
  },
  new: {
    name: 'side-right',
    duration: '0.5s',
    easing: 'ease-in-out',
  },
};
const customTransition = {
  forwards: anim,
  backwards: anim,
};
---

<style>
  #hexlists {
    /* overflow: visible !important; */
  }
  .post-list {
    transition-property: all;
    transition: 200ms cubic-bezier(0, 0, 0.47, 1.55);
  }
  .post-list.selected {
    transform: translateX(0) !important;
    filter: drop-shadow(-10.4px 0px 0px rgb(75 85 99));
  }
  .post-list.selected .icon {
    rotate: 6deg;
  }
</style>

<ul
  id="hexlists"
  class="h-full pl-14 flex flex-col gap-6 overflow-y-auto transition-[margin-left]"
  transition:animate={customTransition}
  transition:persist
  transition:name="post-list"
  data-selected={current?.id}
>
  {
    entries.map(async (entry) => {
      const {
        id,
        data: { title, type, tags, summary },
      } = entry;
      const { remarkPluginFrontmatter } = await render(entry);

      const hash = id.replaceAll('/', '-');

      const lastModified = dayjs(remarkPluginFrontmatter.lastModified)
        .utc()
        .toDate();

      // TODO: fix chrome history
      return (
      <li class=`${type} w-[100vw] post-list cursor-pointer` id={hash} data-id={id}>
          <a
            onclick={`history.replaceState({...history.state, id: '${id}' }, '', '#${id}');location.href = '/blog/${id}';`}
            href={`/blog/${id}`}
            data-astro-prefetch
          >
            {type === 'scenario' ? (
            <Skew >
              <span>{title}</span>
            </Skew>
            ) : (
              <Hex>
                <div
                  slot="content"
                  class="flex flex-row relative prose prose-h2:mb-2 prose-h2:mt-0"
                >
                  <div class="w-fit min-w-64">
                    <h2 class="text-3xl pl-2">{title}</h2>
                    <p>{summary}</p>
                  </div>
                  <div class="flex gap-2 -z-10">
                    {tags.slice(0, 1).map((t) => (
                      <Icon class="w-24 h-24 icon" name={toIcon(t)} />
                    ))}
                  </div>
                </div>
                <div slot="footer">
                  <p>
                    <FormattedDate date={lastModified} />
                    {entry.data.type}
                  </p>
                </div>
              </Hex>
            )}
          </a>
        </li>
      );
    })
  }
</ul>
