---
import 'rehype-callouts/theme/obsidian';
import dayjs from 'dayjs';
import utc from 'dayjs/plugin/utc';
dayjs.extend(utc);
import Layout from '@/layouts/Layout.astro';
import { getCollection, type CollectionEntry, render } from 'astro:content';
import { toIcon } from '@/utils/icon';
import { Icon } from 'astro-icon/components';
import FormattedDate from '@/components/common/FormattedDate.astro';

export async function getStaticPaths() {
  const blogEntries: CollectionEntry<'blog'>[] = await getCollection('blog');

  return blogEntries.map((entry) => ({
    params: { slug: entry.id },
    props: { entry },
  }));
}
const { entry } = Astro.props;
const data = entry.data;
const { Content, remarkPluginFrontmatter } = await render(entry);
const { minutesRead } = remarkPluginFrontmatter;

const lastModified = dayjs(remarkPluginFrontmatter.lastModified).utc().toDate();
---

<style is:global>
  /* TODO: 表格跨行文本上下居中*/
  .jargon-term {
    text-decoration: underline dotted #228be6;
  }
  .jargon-term::after {
    content: '?';
    font-weight: bold;
    display: inline-block;
    transform: translate(0, -0.5em);
    font-size: 75%;
    color: #228be6;
    margin-left: 3px;
  }
  .jargon-term:hover {
    position: relative;
    text-decoration: none;
    cursor: help;
  }
  .jargon-term .jargon-info {
    display: none;
  }
  .jargon-term:hover .jargon-info {
    display: block;
    position: absolute;
    top: 1.5em;
    left: 0;
    background: #f3f4f6;
    box-shadow:
      0 1px 3px 0 rgb(0 0 0 / 0.1),
      0 1px 2px -1px rgb(0 0 0 / 0.1);
    border: 1px solid #dcdcdc;
    padding: 1rem;
    border-radius: 4px;
    border-radius: 12px;
    font-size: 90%;
    min-width: 250px;
    max-width: 450px;
    z-index: 1;
  }
  .prose h1 {
    counter-reset: h2counter;
  }
  .prose h2 {
    counter-reset: h3counter;
  }
  .prose h3 {
    counter-reset: h4counter;
  }
  .prose h4 {
    counter-reset: h5counter;
  }
  .prose h5 {
    counter-reset: h6counter;
  }
  .prose h6 {
  }
  .prose h2:not(#目录):before {
    counter-increment: h2counter;
    content: counter(h2counter) '.\0000a0\0000a0';
  }
  .prose h3:before {
    counter-increment: h3counter;
    content: counter(h2counter) '.' counter(h3counter) '.\0000a0\0000a0';
  }
  .prose h4:before {
    counter-increment: h4counter;
    content: counter(h2counter) '.' counter(h3counter) '.' counter(h4counter)
      '.\0000a0\0000a0';
  }
  .prose h5:before {
    counter-increment: h5counter;
    content: counter(h2counter) '.' counter(h3counter) '.' counter(h4counter)
      '.' counter(h5counter) '.\0000a0\0000a0';
  }
  .prose h6:before {
    counter-increment: h6counter;
    content: counter(h2counter) '.' counter(h3counter) '.' counter(h4counter)
      '.' counter(h5counter) '.' counter(h6counter) '.\0000a0\0000a0';
  }
  .prose p > svg,
  .prose li > svg,
  .prose blockquote > svg,
  .prose h1 > svg,
  .prose h2 > svg,
  .prose h3 > svg,
  .prose h4 > svg,
  .prose h5 > svg,
  .prose h6 > svg,
  .prose th > svg,
  .prose td > svg,
  .prose pre > svg,
  .prose code > svg {
    display: inline-block;
  }
</style>
<script>
  import { debounce } from '@utils/misc';
  let activeHeaderEl: HTMLSpanElement | null = null;
  document.addEventListener('astro:page-load', () => {
    const headings = Array.from(
      document.querySelectorAll<HTMLHeadingElement>(
        'main .prose h2, main .prose h3',
      ),
    );
    activeHeaderEl = document.getElementById('active-header');

    // 示例：监听滚动事件并获取最近的标题元素
    window.addEventListener(
      'scroll',
      debounce(() => {
        const tops = headings.map(
          (heading) => heading.getBoundingClientRect().bottom,
        );
        const minIdx = tops.findLastIndex(
          (top) => top < window.innerHeight * 0.5,
        );
        if (minIdx >= 0) {
          const closestHeading = headings[minIdx];
          console.log(window.scrollY, window.innerHeight, tops[minIdx]);
          if (closestHeading.textContent)
            setActiveHeader(closestHeading.textContent);
        }
      }, 100),
    );
  });

  function setActiveHeader(text: string) {
    if (activeHeaderEl) activeHeaderEl.innerText = text;
  }
</script>
<Layout title={entry.data.title}>
  <main class="w-full py-4">
    <div class="mx-auto prose lg:prose-xl prose-code:font-code">
      <h1>{data.title}</h1>
      <p
        class="flex flex-row divide-x-2 divide-solid divide-slate-200 *:px-2 mb-0"
      >
        {
          /* TODO: <Icon/> 加载时间过长
           */
        }
        <span class="inline-flex gap-2">
          {
            data.tags
              .slice(0, 1)
              .map((t) => toIcon(t))
              .map((t) => <Icon class="h-auto" name={t} />)
          }
        </span>
        <span>
          <FormattedDate date={lastModified} />
        </span>
        <span>{minutesRead?.words}字</span>
        <span>{minutesRead?.text}</span>
      </p>
      <hr />
      <Content />
      <hr />
    </div>
  </main>
</Layout>
