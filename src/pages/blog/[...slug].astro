---
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
dayjs.extend(utc);
import Layout from "@/layouts/Layout.astro";
import { getCollection, type CollectionEntry } from "astro:content";
import { toIcon } from "@/utils/icon";
import { Icon } from "astro-icon/components";
import FormattedDate from "@/components/common/FormattedDate.astro";
import TOC from "@/components/common/TOC.astro";
// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const blogEntries: CollectionEntry<"blog">[] = await getCollection("blog");
  return blogEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}
// 2. For your template, you can get the entry directly from the prop
const { entry } = Astro.props;
const data = entry.data;
const { Content, remarkPluginFrontmatter } = await entry.render();
const { minutesRead } = remarkPluginFrontmatter;

const lastModified = dayjs(remarkPluginFrontmatter.lastModified).utc().toDate();
---

<Layout title={entry.data.title}>
  <main class="w-full">
    <div class="mx-auto prose lg:prose-xl">
      <h1>{data.title}</h1>
      <p class="flex flex-row divide-x-2 divide-solid divide-slate-200 *:px-2">
        <span class="inline-flex gap-2">
          {
            data.tags
              .map((t) => toIcon(t))
              .slice(0, 2)
              .map((t) => <Icon class="h-auto" name={t} />)
          }
        </span>
        <span>
          <FormattedDate date={lastModified} />
        </span>
        <span>{minutesRead}</span>
      </p>
      <hr />
      <!--<TOC {headings}/>-->
      <Content />
    </div>
  </main>
</Layout>
