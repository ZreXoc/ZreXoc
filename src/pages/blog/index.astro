---
import * as path from 'path';
import Layout from '@/layouts/Layout.astro';
import PreviewPost from '@components/post/PreviewPost.astro';

import PostList from '@/components/post/PostList.astro';

import { getCollection, type CollectionEntry } from 'astro:content';
import { EntryTreeBuilder } from '@utils/content';

let entries = await getCollection('blog', ({ data }) => {
  return !data.draft;
});


//const fileTree = buildFileTree(allPosts);
//console.log(fileTree.children[0]);
//const preOrderResult = flattenTree(fileTree);
//allPosts = preOrderResult as CollectionEntry<'blog'>[];


const fileTreeBuilder = EntryTreeBuilder<'blog'>('file');
const fileTree = fileTreeBuilder.buildTree(entries);
const flattenedTree = fileTreeBuilder.flattenTree(fileTree);
entries = flattenedTree

console.log(entries.map(({id}) => id));
// allPosts = [...allPosts, ...allPosts];
// allPosts = [...allPosts, ...allPosts];
// allPosts = [...allPosts, ...allPosts];
---

<script>
  let container: HTMLElement | null;

  let hexlists: NodeListOf<HTMLLIElement>;
  let previews: NodeListOf<HTMLDivElement>;

  let selectedId: string;

  let datum: number;

  const pair = new Map<string, [HTMLLIElement | null, HTMLDivElement | null]>();
  document.addEventListener('astro:page-load', () => {
    container = document.getElementById('hexlists');
    hexlists = document.querySelectorAll<HTMLLIElement>('#hexlists .post-list');
    previews = document.querySelectorAll<HTMLDivElement>('#previews div');

    hexlists.forEach((li) => {
      const id = li.dataset.id;
      if (id) {
        pair.set(id, [li, null]); // 先将值设置为 null
      }
    });

    // 遍历 previews，根据 dataset.id 进行配对
    previews.forEach((div) => {
      const id = div.dataset.id;
      if (id && pair.has(id)) {
        const li = pair.get(id)?.[0] ?? null;
        pair.set(id, [li, div]); // 将对应的 div 存入 Map
      }
    });

    setOffset();
    container?.addEventListener('scroll', setOffset);

    hexlists.forEach((el, idx) => {
      const id = el.dataset['id'];
      if (id)
        el.addEventListener('mouseover', (e) => {
          switchSelected(id);
        });
    });

    const hash = location.hash.slice(1);

    setTimeout(() => {
      if (hash || history.state?.id) focus(hash || history.state.id);
      else switchSelected(pair.keys().next().value);
    }, 100);
  });

  function setOffset() {
    if (!container) return;

    const containerRect = container.getBoundingClientRect();
    const containerHeight = containerRect.height; // 获取元素的位置信息
    hexlists.forEach((el, idx) => {
      if (el.classList.contains('scenario')) return;
      const childRect = el.getBoundingClientRect();
      if (selectedId == el.dataset['id']) {
        /*        const anim = el.animate([{ transform: "translateX(0)" }], 30);
        anim.addEventListener("finish", () => {
          el.style.transform = "unset";
        });
        */
        el.classList.add('selected');
        return;
      }

      datum = containerRect.top + containerRect.height * 0.2;

      const relativeY = childRect.top - containerRect.top;
      //const delta = Math.min(relativeY, containerRect.height - relativeY);
      const deltaY = childRect.top - datum;
      const calcML = (dy: number) => (dy < 0 ? -dy * 0.3 : dy * 0.15);

      // el.style.marginLeft = `${calcML(relativeY - containerRect.height * 0.7)}px`;
      el.style.transform = `translateX(${calcML(deltaY)}px)`;
    });
  }

  function switchSelected(id?: string) {
    if (!id) return;
    if (id == selectedId) {
      //const hash = id.replaceAll('/', '-')
      //location.assign(`#${hash}`);
      return;
    }
    const p = pair.get(id);
    if (!p) return;
    const [li, preview] = p;
    if (!li || !preview) {
      console.error(`post list or preview for ${id} not found`);
      return;
    }

    unselect(selectedId);

    preview.classList.remove('hidden');
    preview.classList.add('contents');
    preview.getElementsByClassName('preview-post')[0]?.classList.add('active');
    li.classList.add('selected');

    selectedId = id;

    setOffset();
    //li.style.marginLeft = '0px';
  }

  function focus(id: string) {
    switchSelected(id);
    const p = pair.get(id);
    if (!p) return;
    const [li, _] = p;
    if (!li) return;
    container?.scroll({
      top: li.offsetTop - datum,
      behavior: 'smooth',
    });
  }

  function unselect(id: string) {
    if (!id) return;
    const p = pair.get(id);
    if (!p) return;
    const [li, preview] = p;

    preview?.classList.add('hidden');
    preview
      ?.getElementsByClassName('preview-post')[0]
      ?.classList.remove('active');
    li?.classList.remove('selected');
  }
</script>

<Layout title="blog">
  <main class="flex h-[calc(100vh-24px)] w-full">
    <div class="flex flex-grow-1 flex-col h-full w-[100vw] lg:w-[60vw]">
      <div id="previews" class="mt-[12%] w-full flex-1 p-8">
        {
          entries.map((entry, idx) => {
            return (
              <div class={'hidden'} data-id={entry.id}>
                <PreviewPost entry={entry} />
              </div>
            );
          })
        }
      </div>
    </div>
    <div class="max-w-[50%] lg:max-w-[40%] overflow-x-hidden">
      <PostList {entries} />
    </div>
  </main>
</Layout>
